CREATE OR REPLACE FUNCTION actualizar_registro(
    cr_id INT,
    servidor TEXT,
    ip TEXT,
    tipo_servidor TEXT,
    entorno_ci TEXT,
    pais TEXT,
    aplicacion TEXT,
    lenguaje TEXT,
    proveedor TEXT,
    desarrollo TEXT,
    responsable TEXT,
    rep TEXT,
    alojamiento TEXT,
    esquema_de_continuidad TEXT,
    estrategias_de_recuperacion_infra TEXT,
    estrategias_de_recuperacion_datos TEXT,
    tiempo_de_instalacion_servidor TEXT,
    tiempo_de_instalacion_aplicacion TEXT,
    joya_de_la_corona TEXT
)
RETURNS VOID AS $$
BEGIN
    -- Aquí va la lógica para actualizar la tabla en SQL.
    UPDATE cis_registros
    SET cr_servidor = servidor,
        cr_direccion_ip = ip,
        cr_tipo_servidor = tipo_servidor,
        cr_entorno_ci = entorno_ci,
        cr_pais = pais,
        cr_aplicacion = aplicacion,
        cr_lenguaje = lenguaje,
        cr_proveedor = proveedor,
        cr_desarrollo = desarrollo,
        cr_mesa_responsable = responsable,
        cr_rep = rep,
        cr_alojamiento = alojamiento,
        cr_esquema_de_continuidad = esquema_de_continuidad,
        cr_estrategias_de_recuperacion_infra = estrategias_de_recuperacion_infra,
        cr_estrategias_de_recuperacion_datos = estrategias_de_recuperacion_datos,
        cr_tiempo_de_instalacion_servidor = tiempo_de_instalacion_servidor,
        cr_tiempo_de_instalacion_aplicacion = tiempo_de_instalacion_aplicacion,
        cr_joya_de_la_corona = joya_de_la_corona
    WHERE cr_id = cr_id;
END;
$$ LANGUAGE plpgsql;
-------------------------------------------------------------------------------------------------------------------------------------

@cmdb.route('/cmdb/edit', methods=['POST'])
@require_api_key
def edit_record():
    try:
        errorcode = 0
        errormsg = ""
        data = request.get_json()
        creador = data['creador'].replace('"', '')
        cr_id = data['cr_id']
        servidor = data['servidor']
        ip = data['ip']
        tipo_servidor = data['tipo_servidor']
        entorno_ci = data['entorno_ci']
        pais = data['pais']
        aplicacion = data['aplicacion']
        lenguaje = data['lenguaje']
        proveedor = data['proveedor']
        desarrollo = data['desarrollo']
        responsable = data['responsable']
        rep = data['rep']
        alojamiento = data['alojamiento']
        esquema_de_continuidad = data['esquema_de_continuidad']
        estrategias_de_recuperacion_infra = data['estrategias_de_recuperacion_infra']
        estrategias_de_recuperacion_datos = data['estrategias_de_recuperacion_datos']
        tiempo_de_instalacion_servidor = data['tiempo_de_instalacion_servidor']
        tiempo_de_instalacion_aplicacion = data['tiempo_de_instalacion_aplicacion']
        joya_de_la_corona = data['joya_de_la_corona']

        # Autenticación de usuario
        user_groups = ldap_login(creador, data['upwd'].replace('"',''))

        connection = psycopg2.connect(user=db_User,
                                      password=db_Pass,
                                      host=db_Host,
                                      port=db_Port,
                                      database="cmdb_integracion")
        cursor = connection.cursor(cursor_factory=RealDictCursor)

        # Validar usuario que edita
        cursor.execute(f"SELECT cr_creador FROM cis_registros WHERE cr_id = {cr_id}")
        result = cursor.fetchone()

        # Verificación de grupo
        var = False
        for group in user_groups:
            if 'ccyl' in group:
                var = True
                break
        
        if var == False:
            if creador not in result.values():
                errorcode = 1
                raise Exception

        # Llamar a la función de PostgreSQL para actualizar el registro
        cursor.execute("""
            SELECT actualizar_registro(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (
            cr_id, data['servidor'], data['ip'], data['tipo_servidor'], data['entorno_ci'],
            data['pais'], data['aplicacion'], data['lenguaje'], data['proveedor'],
            data['desarrollo'], data['responsable'], data['rep'], data['alojamiento'],
            data['esquema_de_continuidad'], data['estrategias_de_recuperacion_infra'],
            data['estrategias_de_recuperacion_datos'], data['tiempo_de_instalacion_servidor'],
            data['tiempo_de_instalacion_aplicacion'], data['joya_de_la_corona']
        ))

        # Obtener el resultado de la función
        result = cursor.fetchone()
        if not result[0]:  # Si la función devolvió False
            raise Exception("Error al actualizar el registro")

    except (Exception, Error):
        if errorcode == 1:
            errormsg = jsonify("ERROR: No puede modificar este registro!")
        else:
            errormsg = jsonify("ERROR: Algo ha salido mal al intentar guardar.")
    finally:
        if connection:
            cursor.close()
            connection.close()

    if errorcode != 0:
        return errormsg
    else:
        return jsonify("Se editó el registro correctamente!")

-----------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION eliminar_registro(cr_id INTEGER, creador VARCHAR)
RETURNS VOID AS $$
DECLARE
    -- Puedes declarar variables aquí si es necesario
BEGIN
    -- Verificar si el creador tiene permisos para eliminar
    -- (puedes ajustar la lógica según tus necesidades)
    
    -- Eliminar el registro correspondiente
    DELETE FROM cis_registros 
    WHERE cr_id = cr_id 
      AND creador = creador;

    -- Si necesitas manejar algún caso específico, puedes hacerlo aquí.
END;
$$ LANGUAGE plpgsql;


@cmdb.route('/cmdb/delete', methods=['POST'])
@require_api_key
def delete_record():
    try:
        errorcode = 0
        errormsg = ""
        data = request.get_json()
        
        # Extracción de datos
        creador = data['creador'].replace('"', '')
        cr_id = data['cr_id']
        
        # Simulando el inicio de sesión LDAP
        user_groups = ldap_login(creador, data['upwd'].replace('"', ''))

        # Verificación de permisos
        var = False
        for group in user_groups:
            if 'ipd-engineers' in group:  # Asegúrate de que el grupo sea correcto
                print('parte del grupo')
                var = True
                break
        
        if not var:
            errorcode = 1
            raise Exception
        
        # Llamar a la función almacenada en PostgreSQL
        sql = f"SELECT eliminar_registro({cr_id}, '{creador}');"
        
        # Conectar a la base de datos
        connection = psycopg2.connect(user=db_User,
                                       password=db_Pass,
                                       host=db_Host,
                                       port=db_Port,
                                       database="cmdb_integracion")
        cursor = connection.cursor(cursor_factory=RealDictCursor)

        # Ejecutar la función almacenada
        cursor.execute(sql)
        result = cursor.fetchone()  # Obtener el resultado de la función
        
        # Verificar el resultado
        if result is None or 'ERROR' in result[0]:  # Asegúrate de que el índice sea correcto
            errorcode = 1
            errormsg = jsonify("ERROR: Algo salió mal al intentar eliminar el registro.")
            print("ERROR: 1")
        else:
            return jsonify(result[0])  # Retornar el mensaje de éxito
        
    except (Exception, Error) as e:
        logging.error(f"[ERROR]: {str(e)}")  # Mejor manejo de errores
        if errorcode == 1:
            errormsg = jsonify("ERROR: No tiene permisos para eliminar registros!")
            print("ERROR: 1")
        else:
            errormsg = jsonify("ERROR: Algo ha salido mal al intentar eliminar el registro.")
    
    finally:
        # Cerrar conexión
        if connection:
            cursor.close()
            connection.close()
            
    # Devolver mensaje de error si corresponde
    if errorcode != 0:
        return errormsg
    else:
        return jsonify("Se eliminó el registro correctamente!")










@cmdb.route('/cmdb/delete', methods=['POST'])
@require_api_key
def delete_record():
    try:
        errorcode = 0
        errormsg = ""
        data = request.get_json()
        creador = data['creador'].replace('"', '')
        cr_id = data['cr_id']
        user_groups = ldap_login(creador, data['upwd'].replace('"',''))
        sql = f"""
                DELETE FROM cis_registros WHERE cr_id = '{cr_id}'
                """
        connection = psycopg2.connect(user=db_User,
                                      password=db_Pass,
                                      host=db_Host,
                                      port=db_Port,
                                      database="cmdb_integracion")
        cursor = connection.cursor(cursor_factory=RealDictCursor)
        var = False
        for group in user_groups:
            if 'ipd-engineers' in group:
                print('parte del grupo')
                var = True
                break
        if var == False:
            errorcode = 1
            raise Exception
        cursor.execute(sql)
        connection.commit()
    except (Exception, Error):
        if errorcode == 1:
            errormsg = jsonify(
                "ERROR: No tiene permisos para eliminar registros!")
            print("ERROR: 1")
        else:
            logging.error(
                f"[ERROR]: Algo ha salido mal al intentar eliminar el registro.")
    finally:
        if connection:
            cursor.close()
            connection.close()
    if errorcode != 0:
        return (errormsg)
    else:
        return jsonify("Se elimino el registro!")




    import logging
from flask import jsonify, request

@cmdb.route('/cmdb/delete', methods=['POST'])
@require_api_key
def delete_record():
    try:
        errorcode = 0
        errormsg = ""
        data = request.get_json()
        creador = data['creador'].replace('"', '')  # Capturando el creador, aunque no se usa en la eliminación
        cr_id = data['cr_id']
        user_groups = ldap_login(creador, data['upwd'].replace('"',''))

        # Usar la función eliminar_registro para eliminar el registro
        sql = f"SELECT eliminar_registro({cr_id});"  # Llamando a la función directamente

        connection = psycopg2.connect(user=db_User,
                                       password=db_Pass,
                                       host=db_Host,
                                       port=db_Port,
                                       database="cmdb_integracion")
        cursor = connection.cursor(cursor_factory=RealDictCursor)

        # Verificar grupos de usuario
        var = False
        for group in user_groups:
            if 'ipd-engineers' in group:
                print('parte del grupo')
                var = True
                break
        if not var:
            errorcode = 1
            raise Exception("No tiene permisos para eliminar registros.")

        cursor.execute(sql)
        connection.commit()

    except (Exception, Error) as e:
        if errorcode == 1:
            errormsg = jsonify("ERROR: No tiene permisos para eliminar registros!")
            logging.error(f"[ERROR]: {str(e)}")  # Registrar el error
        else:
            logging.error(f"[ERROR]: Algo ha salido mal al intentar eliminar el registro: {str(e)}")  # Registrar el error
    finally:
        if 'cursor' in locals():  # Verificar si el cursor existe
            cursor.close()
        if 'connection' in locals():  # Verificar si la conexión existe
            connection.close()
    if errorcode != 0:
        return errormsg
    else:
        return jsonify("Se eliminó el registro!")

------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION actualizar_cis_registro(
    p_cr_id INTEGER,
    p_servidor TEXT,
    p_ip TEXT,
    p_tipo_servidor TEXT,
    p_entorno_ci TEXT,
    p_pais TEXT,
    p_aplicacion TEXT,
    p_lenguaje TEXT,
    p_proveedor TEXT,
    p_desarrollo TEXT,
    p_responsable TEXT,
    p_rep TEXT,
    p_alojamiento TEXT,
    p_esquema_de_continuidad TEXT,
    p_estrategias_de_recuperacion_infra TEXT,
    p_estrategias_de_recuperacion_datos TEXT,
    p_tiempo_de_instalacion_servidor TEXT,
    p_tiempo_de_instalacion_aplicacion TEXT,
    p_joya_de_la_corona BOOLEAN
)
RETURNS VOID AS $$
BEGIN
    UPDATE cis_registros
    SET cr_servidor = p_servidor,
        cr_direccion_ip = p_ip,
        cr_tipo_servidor = p_tipo_servidor,
        cr_entorno_ci = p_entorno_ci,
        cr_pais = p_pais,
        cr_aplicacion = p_aplicacion,
        cr_lenguaje = p_lenguaje,
        cr_proveedor = p_proveedor,
        cr_desarrollo = p_desarrollo,
        cr_mesa_responsable = p_responsable,
        cr_rep = p_rep,
        cr_alojamiento = p_alojamiento,
        cr_esquema_de_continuidad = p_esquema_de_continuidad,
        cr_estrategias_de_recuperacion_infra = p_estrategias_de_recuperacion_infra,
        cr_estrategias_de_recuperacion_datos = p_estrategias_de_recuperacion_datos,
        cr_tiempo_de_instalacion_servidor = p_tiempo_de_instalacion_servidor,
        cr_tiempo_de_instalacion_aplicacion = p_tiempo_de_instalacion_aplicacion,
        cr_joya_de_la_corona = p_joya_de_la_corona
    WHERE cr_id = p_cr_id;
END;
$$ LANGUAGE plpgsql;


@cmdb.route('/cmdb/edit', methods=['POST'])
@require_api_key
def edit_record():
    try:
        errorcode = 0
        errormsg = ""
        data = request.get_json()
        creador = data['creador'].replace('"', '')
        cr_id = data['cr_id']
        servidor = data['servidor']
        ip = data['ip']
        tipo_servidor = data['tipo_servidor']
        entorno_ci = data['entorno_ci']
        pais = data['pais']
        aplicacion = data['aplicacion']
        lenguaje = data['lenguaje']
        proveedor = data['proveedor']
        desarrollo = data['desarrollo']
        responsable = data['responsable']
        rep = data['rep']
        alojamiento = data['alojamiento']
        esquema_de_continuidad = data['esquema_de_continuidad']
        estrategias_de_recuperacion_infra = data['estrategias_de_recuperacion_infra']
        estrategias_de_recuperacion_datos = data['estrategias_de_recuperacion_datos']
        tiempo_de_instalacion_servidor = data['tiempo_de_instalacion_servidor']
        tiempo_de_instalacion_aplicacion = data['tiempo_de_instalacion_aplicacion']
        joya_de_la_corona = data['joya_de_la_corona']
        user_groups = ldap_login(creador, data['upwd'].replace('"',''))

        connection = psycopg2.connect(user=db_User,
                                      password=db_Pass,
                                      host=db_Host,
                                      port=db_Port,
                                      database="cmdb_integracion")
        cursor = connection.cursor(cursor_factory=RealDictCursor)
        # Validar usuario que edita
        cursor.execute(f"SELECT cr_creador FROM cis_registros WHERE cr_id = {cr_id}")
        result = cursor.fetchone()
        var = False
        for group in user_groups:
            if 'ipd-engineers' in group:
                var = True
                break
        if not var and creador not in result.values():
            errorcode = 1
            raise Exception

        # Llamar a la función almacenada en PostgreSQL
        cursor.callproc('actualizar_cis_registro', [
            cr_id, servidor, ip, tipo_servidor, entorno_ci, pais, aplicacion, lenguaje,
            proveedor, desarrollo, responsable, rep, alojamiento, esquema_de_continuidad,
            estrategias_de_recuperacion_infra, estrategias_de_recuperacion_datos,
            tiempo_de_instalacion_servidor, tiempo_de_instalacion_aplicacion, joya_de_la_corona
        ])
        connection.commit()

    except (Exception, Error):
        if errorcode == 1:
            errormsg = jsonify("ERROR: No puede modificar este registro!")
        else:
            logging.error(f"[ERROR]: Algo ha salido mal al intentar guardar.")
    finally:
        if connection:
            cursor.close()
            connection.close()
    if errorcode != 0:
        return errormsg
    else:
        return jsonify("Se editó el registro correctamente!")



SELECT actualizar_cis_registro(
    1,                          -- cr_id
    'servidor_test',             -- servidor
    '192.168.1.10',              -- ip
    'web',                       -- tipo_servidor
    'producción',                -- entorno_ci
    'España',                    -- pais
    'Aplicación X',              -- aplicacion
    'Python',                    -- lenguaje
    'Proveedor Y',               -- proveedor
    'En desarrollo',             -- desarrollo
    'Responsable Z',             -- responsable
    'Rep info',                  -- rep
    'En local',                  -- alojamiento
    'Esquema básico',            -- esquema_de_continuidad
    'Recuperación completa',     -- estrategias_de_recuperacion_infra
    'Backup diario',             -- estrategias_de_recuperacion_datos
    '1 hora',                    -- tiempo_de_instalacion_servidor
    '2 horas',                   -- tiempo_de_instalacion_aplicacion
    true                         -- joya_de_la_corona
);
SELECT * FROM cis_registros WHERE cr_id = 1;
