################## catalogos ############################################33
CREATE OR REPLACE FUNCTION obtener_catalogos()
RETURNS JSONB AS $$
DECLARE
    resultado JSONB;
BEGIN
    -- Unificamos todos los resultados en una única consulta y combinamos los JSON en un array
    resultado := jsonb_agg(jsonb_build_array(
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_alojamiento t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_desarrollo t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_entorno_ci t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_lenguaje t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_nombre_aplicacion t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_pais_servidor t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_proveedor t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_responsable_aplicacion t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_tipo_servidor t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_esquema t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_estrategias_infra t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_estrategias_datos t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_tiempo_infra_servidor t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_tiempo_infra_aplicacion t),
        (SELECT jsonb_agg(row_to_json(t)) FROM cis_joya t)
    ));
    
    RETURN resultado;
END;
$$ LANGUAGE plpgsql;
--------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION obtener_catalogos()
RETURNS JSONB AS $$
DECLARE
    resultado JSONB := '[]'::jsonb; -- Inicializamos un array JSON vacío
BEGIN
    -- Agregamos los resultados de cada tabla a la variable 'resultado'
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_alojamiento t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_desarrollo t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_entorno_ci t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_lenguaje t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_nombre_aplicacion t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_pais_servidor t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_proveedor t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_responsable_aplicacion t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_tipo_servidor t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_esquema t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_estrategias_infra t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_estrategias_datos t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_tiempo_infra_servidor t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_tiempo_infra_aplicacion t);
    resultado := resultado || (SELECT jsonb_agg(row_to_json(t)) FROM cis_joya t);

    -- Retornamos el array final que contiene los resultados de todas las tablas
    RETURN resultado;
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------------------------------------------------------------------


@cmdb.route('/cmdb/catalog', methods=['GET'])
@require_api_key
def catalogos():
    if request.method == 'GET':
        result2 = []
        connection = None
        try:
            connection = psycopg2.connect(user=db_User,
                                           password=db_Pass,
                                           host=db_Host,
                                           port=db_Port,
                                           database="cmdb_integracion")
            cursor = connection.cursor(cursor_factory=RealDictCursor)

            # Ejecutamos la función que devuelve el array de JSON
            cursor.execute("SELECT obtener_catalogos();")
            result = cursor.fetchone()
            
            # Aseguramos que result sea procesado correctamente en formato JSON
            result2 = result['obtener_catalogos']

            logging.info(json.dumps(result2))
        except Error as e:
            logging.error(f"[ERROR]: Algo ha salido mal: {e.pgerror}")
        finally:
            if connection:
                cursor.close()
                connection.close()

    return json.dumps(result2, ensure_ascii=False).encode('utf8')



Inicio
[[{"ca_id": 21, "ca_tipo_alojamiento": "Pruebas A"}, {"ca_id": 22, "ca_tipo_alojamiento": "Pruebas BG"},
Fin de la cadena:
"ctia_tiempo": "22-24hrs"}, {"ctia_id": 11, "ctia_tiempo": "Más de 24 horas"}, {"ctia_id": 6, "ctia_tiempo": "12-14hrs"}, {"ctia_id": 7, "ctia_tiempo": "16-18hrs"}], [{"cj_id": 1, "cj_joya": "SI"}, {"cj_id": 2, "cj_joya": "NO"}]]


Inicio:
[[{"obtener_catalogos": [{"ca_id": 21, "ca_tipo_alojamiento": "Pruebas A"}, {"ca_id": 22, "ca_tipo_alojamiento": "Pruebas BG"},
Fin de la cadena:
"obtener_catalogos": [{"cj_id": 1, "cj_joya": "SI"}, {"cj_id": 2, "cj_joya": "NO"}]}]]



Inicio cadena:
[[[{"ca_id": 21, "ca_tipo_alojamiento": "Pruebas A"}, {"ca_id": 22, "ca_tipo
fin cadena:
tiempo": "16-18hrs"}], [{"cj_id": 1, "cj_joya": "SI"}, {"cj_id": 2, "cj_joya": "NO"}]]]

inicio cadena:
[{"cis_joya": [{"cj_id": 1, "cj_joya": "SI"}, {"cj_id": 2, "cj_joya": "NO"}],
fin cadena:
 6, "ctia_tiempo": "12-14hrs"}, {"ctia_id": 7, "ctia_tiempo": "16-18hrs"}]}]



##############################################################################################################################

Add catalogo
CREATE OR REPLACE FUNCTION add_catalog_item(
    catalog_name TEXT,
    value TEXT
) RETURNS TEXT AS $$
DECLARE
    table_name TEXT;
    column_name TEXT;
    check_query TEXT;
    exists_count INT;
BEGIN
    -- Mapeo de catálogos a tablas y columnas
    IF catalog_name = 'Alojamiento' THEN
        table_name := 'cis_alojamiento';
        column_name := 'ca_tipo_alojamiento';
    ELSIF catalog_name = 'Desarrollo' THEN
        table_name := 'cis_desarrollo';
        column_name := 'cd_desarrollo';
    ELSIF catalog_name = 'Entorno' THEN
        table_name := 'cis_entorno_ci';
        column_name := 'cec_tipo';
    ELSIF catalog_name = 'Lenguaje' THEN
        table_name := 'cis_lenguaje';
        column_name := 'cl_lenguaje';
    ELSIF catalog_name = 'Aplicacion' THEN
        table_name := 'cis_nombre_aplicacion';
        column_name := 'cna_aplicacion';
    ELSIF catalog_name = 'Pais' THEN
        table_name := 'cis_pais_servidor';
        column_name := 'cps_servidor';
    ELSIF catalog_name = 'Proveedor' THEN
        table_name := 'cis_proveedor';
        column_name := 'cp_proveedor';
    ELSIF catalog_name = 'Responsable' THEN
        table_name := 'cis_responsable_aplicacion';
        column_name := 'cra_mesa';
    ELSIF catalog_name = 'Tipo Servidor' THEN
        table_name := 'cis_tipo_servidor';
        column_name := 'cts_tipo_servidor';
    ELSIF catalog_name = 'Esquema de Continuidad' THEN
        table_name := 'cis_esquema';
        column_name := 'ce_esquema';
    ELSIF catalog_name = 'Estrategias de Recuperación Infra' THEN
        table_name := 'cis_estrategias_infra';
        column_name := 'cei_estrategias';
    ELSIF catalog_name = 'Estrategias de Recuperación Datos' THEN
        table_name := 'cis_estrategias_datos';
        column_name := 'ced_estrategias';
    ELSIF catalog_name = 'Tiempo de Instalación (Servidor)' THEN
        table_name := 'cis_tiempo_infra_servidor';
        column_name := 'ctis_tiempo';
    ELSIF catalog_name = 'Tiempo de Instalación (Aplicación)' THEN
        table_name := 'cis_tiempo_infra_aplicacion';
        column_name := 'ctia_tiempo';
    ELSIF catalog_name = 'Joya de la Corona' THEN
        table_name := 'cis_joya';
        column_name := 'cj_joya';
    ELSE
        RETURN 'ERROR: Catálogo no reconocido.';
    END IF;

    -- Verifica si el valor ya existe en la tabla
    check_query := FORMAT('SELECT COUNT(*) FROM %I WHERE %I = $1', table_name, column_name);
    EXECUTE check_query INTO exists_count USING value;

    IF exists_count > 0 THEN
        RETURN 'ERROR: El dato ya existe en el catálogo.';
    END IF;

    -- Inserta el nuevo valor
    EXECUTE FORMAT('INSERT INTO %I (%I) VALUES ($1)', table_name, column_name) USING value;

    RETURN 'Se agregó el registro correctamente!';
END;
$$ LANGUAGE plpgsql;
----------------------------------------------------------------------------- api
@cmdb.route('/cmdb/add_catalog', methods=['POST'])
@require_api_key
def addCatalog():
    if request.method == 'POST':
        errorcode = 0
        errormsg = ""
        result = None
        connection = None

        value = request.form.get('value').replace('"', '') 
        catalogo = request.form.get('tabValue').replace('"', '') 
        
        try:
            connection = psycopg2.connect(user=db_User,
                                          password=db_Pass,
                                          host=db_Host,
                                          port=db_Port,
                                          database="cmdb_integracion")
            cursor = connection.cursor()

            # Llama a la función almacenada en PostgreSQL
            cursor.execute("SELECT add_catalog_item(%s, %s)", (catalogo, value))
            result = cursor.fetchone()[0]  # Obtiene el resultado devuelto por la función

            connection.commit()

        except psycopg2.DatabaseError as e:
            logging.error(f"[ERROR]: Algo ha salido mal al intentar guardar: {e.pgerror}")
            errorcode = 1
            errormsg = f"ERROR: {e.pgerror}"  # Establecer el mensaje de error
        finally:
            if connection:
                cursor.close()
                connection.close()
        
        # Devuelve el resultado en el formato esperado
        return jsonify({
            "errorcode": errorcode,
            "errormsg": errormsg,
            "result": result if result else "No se ha agregado ningún registro."
        })
###############################################################################################################################
api remover

@cmdb.route('/cmdb/delete_catalog', methods=['POST'])
@require_api_key
def deleteCatalog():
    if request.method == 'POST':
        connection = None
        errorcode = 0
        errormsg = ""

        # Obtener los valores enviados desde el frontend
        id = (request.form.get('id').replace('"',''))  # Valor a eliminar
        catalogo = (request.form.get('cat').replace('"',''))  # Nombre del catálogo

        try:
            # Establecer conexión con la base de datos
            connection = psycopg2.connect(user=db_User,
                                          password=db_Pass,
                                          host=db_Host,
                                          port=db_Port,
                                          database="cmdb_integracion")
            cursor = connection.cursor(cursor_factory=RealDictCursor)

            # Llamar a la función SQL de PostgreSQL para eliminar el registro
            cursor.callproc('remove_catalog_item', (catalogo, id))

            # Commit de la transacción
            connection.commit()

        except Error as e:
            logging.error(f"[ERROR]: Algo ha salido mal al intentar eliminar: {e.pgerror}")
            errormsg = f"ERROR: {e.pgerror}"
            errorcode = 1
        finally:
            if connection:
                cursor.close()
                connection.close()

        # Si hubo un error, responde con el mensaje de error
        if errorcode != 0:
            return jsonify({"error": errormsg}), 400
        # Si no hubo error, responde con el resultado
        else:
            return jsonify({"result": "Se eliminó el registro correctamente!"})


------------------------------------------------------------------------------------------------
X Headers Preview Response Initiator
Timing
e: [ {tabla_name: "cis_alojamiento"
{tabla_name: "cis_desarrollo" , {tabla_name: ,m}, ]
{tabla_name: "cis_alojamiento"
resultado: [{ca_id: 21, "Pruebas A"}, {ca_id: 22, "Pruebas BG"},
resultado: [{cec_id: 1, cec_tipo: "Produccion"}, {cec_id: 2, cec_tipo:
tabla_name: "cis_aloj amiento"
{tabla_name: "cis_desarrollo"
resultado: [{cd_id: 2, cd_desarrollo:
tabla name: "cis desarrollo"
{tabla_name: "cis_entorno ci
tabla name: "cis entorno ci"
{tabla_name: "cis_1enguaJe ,
"Proveedor Comercial"}, {cd_id: 3, cd_desarrollo:
"Contingencxa } ,
resultado: [ {cl _ id: 2, cl_lenguaje: "ASP, Vbscrip, Javascript, DLL en lenjuage
tabla name: "cis_lenguaje"
{tabla_name:
resultado: f {cna id: 1, cna joya: "SI",
cna aplicacion:
"Acceso Remoto al Negocio



[[{ca_id: 21, ca_tipo_alojamiento: "Pruebas A"}, {ca_id: 22, ca_tipo_alojamiento: "Pruebas BG"},…],…]
0
: 
[{ca_id: 21, ca_tipo_alojamiento: "Pruebas A"}, {ca_id: 22, ca_tipo_alojamiento: "Pruebas BG"},…]
1
: 
[{cd_id: 2, cd_desarrollo: "Proveedor Comercial"}, {cd_id: 3, cd_desarrollo: "Tercerizado"},…]
2
: 
[{cec_id: 1, cec_tipo: "Produccion"}, {cec_id: 2, cec_tipo: "Contingencia"},…]
3
: 
[{cl_id: 2, cl_lenguaje: "ASP, Vbscrip, Javascript, DLL en lenjuage C"},…]
4
: 
[{cna_id: 1, cna_aplicacion: "Acceso Remoto al Negocio (Citrix)", cna_joya: "SI"},…]
5
: 
[{cps_id: 1, cps_servidor: "Panamá"}, {cps_id: 2, cps_servidor: "Costa Rica"},…]


--------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION edit_catalog(
    p_catalogo TEXT,
    p_id TEXT,
    p_value TEXT
)
RETURNS TEXT AS $$
DECLARE
    catalog TEXT;
    c_id TEXT;
    c_data TEXT;
    exists_value TEXT;
    catalogos TEXT[] := ARRAY[
        'Alojamiento', 'Desarrollo', 'Entorno', 'Lenguaje', 'Aplicacion', 'Pais', 'Proveedor', 'Responsable', 
        'Tipo Servidor', 'Esquema de Continuidad', 'Estrategias de Recuperación Infra', 
        'Estrategias de Recuperación Datos', 'Tiempo de Instalación (Servidor)', 
        'Tiempo de Instalación (Aplicación)', 'Joya de la Corona'
    ];
    tables TEXT[] := ARRAY[
        'cis_alojamiento', 'cis_desarrollo', 'cis_entorno_ci', 'cis_lenguaje', 'cis_nombre_aplicacion', 
        'cis_pais_servidor', 'cis_proveedor', 'cis_responsable_aplicacion', 'cis_tipo_servidor', 
        'cis_esquema', 'cis_estrategias_infra', 'cis_estrategias_datos', 'cis_tiempo_infra_servidor', 
        'cis_tiempo_infra_aplicacion', 'cis_joya'
    ];
    col_id TEXT[] := ARRAY[
        'ca_id', 'cd_id', 'cec_id', 'cl_id', 'cna_id', 'cps_id', 'cp_id', 'cra_id', 'cts_id', 'ce_id', 
        'cei_id', 'ced_id', 'ctis_id', 'ctia_id', 'cj_id'
    ];
    col_data TEXT[] := ARRAY[
        'ca_tipo_alojamiento', 'cd_desarrollo', 'cec_tipo', 'cl_lenguaje', 'cna_aplicacion', 'cps_servidor', 
        'cp_proveedor', 'cra_mesa', 'cts_tipo_servidor', 'ce_esquema', 'cei_estrategias', 'ced_estrategias', 
        'ctis_tiempo', 'ctia_tiempo', 'cj_joya'
    ];
    i INT;
BEGIN
    -- Buscar el índice del catálogo correspondiente
    FOR i IN 1..array_length(catalogos, 1) LOOP
        IF catalogos[i] = p_catalogo THEN
            catalog := tables[i];
            c_id := col_id[i];
            c_data := col_data[i];
            EXIT;
        END IF;
    END LOOP;

    -- Verificar si el valor ya existe en la tabla
    EXECUTE format('SELECT %I FROM %I WHERE %I = $1', c_data, catalog, c_data) INTO exists_value USING p_value;
    IF exists_value IS NOT NULL THEN
        RETURN 'ERROR: El dato ya existe en el catalogo.';
    END IF;

    -- Convertir el id de texto a entero y actualizar el valor en la tabla
    EXECUTE format('UPDATE %I SET %I = $1 WHERE %I = $2::integer', catalog, c_data, c_id) USING p_value, p_id;

    RETURN 'Se edito el registro correctamente!';
END;
$$ LANGUAGE plpgsql;



@app.route('/cmdb/edit_catalog', methods=['POST'])
def editCatalog():
    if request.method == 'POST':
        try:
            # Obtener los datos del formulario
            catalogo = request.form.get('cat').replace('"', '')
            id = request.form.get('id').replace('"', '')
            value = request.form.get('value').replace('"', '')

            # Conectar a la base de datos
            connection = psycopg2.connect(
                user=db_User,
                password=db_Pass,
                host=db_Host,
                port=db_Port,
                database=db_Name
            )
            cursor = connection.cursor()

            # Llamar a la función de PostgreSQL para editar el catálogo
            cursor.execute("SELECT edit_catalog(%s, %s, %s)", (catalogo, id, value))
            result = cursor.fetchone()  # Obtener el resultado de la función

            # Verificar el mensaje de la función
            if result:
                message = result[0]  # El mensaje que retorna la función

        except Exception as e:
            logging.error(f"[ERROR]: Algo ha salido mal: {str(e)}")
            message = jsonify({"error": "Algo ha salido mal al intentar editar el catálogo."})
        finally:
            if connection:
                cursor.close()
                connection.close()

        return jsonify({"message": message})

-------------------------------------------------------------------------------------------------------------------------------------------------------

oder.py", line 202, in encode
    chunks = list(chunks)
             ^^^^^^^^^^^^
  File "C:\Users\alvsanchez\AppData\Local\Programs\Python\Python311\Lib\json\encoder.py", line 432, in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
  File "C:\Users\alvsanchez\AppData\Local\Programs\Python\Python311\Lib\json\encoder.py", line 406, in _iterencode_dict
    yield from chunks
  File "C:\Users\alvsanchez\AppData\Local\Programs\Python\Python311\Lib\json\encoder.py", line 439, in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
  File "C:\Users\alvsanchez\Documents\ipd-argos-api\cmdb\.env\Lib\site-packages\flask\json\provider.py", line 120, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type Response is not JSON serializable


@cmdb.route('/cmdb/edit_catalog', methods=['POST'])
@require_api_key
def editCatalog():
    if request.method == 'POST':
        errorcode = 0
        errormsg = ""
        connection = None
        
        # Capturar los parámetros del formulario
        catalogo = request.form.get('cat').replace('"','') 
        id = request.form.get('id').replace('"','') 
        value = request.form.get('value').replace('"','') 
        
        try:
            # Establecer la conexión con la base de datos
            connection = psycopg2.connect(user=db_User,
                                          password=db_Pass,
                                          host=db_Host,
                                          port=db_Port,
                                          database="cmdb_integracion")
            cursor = connection.cursor()

            # Llamar a la función de PostgreSQL
            cursor.execute("SELECT edit_catalog(%s, %s, %s)", (catalogo, id, value))
            result = cursor.fetchone()  # Obtener el mensaje de resultado de la función

            # Si la función devuelve un mensaje de error
            if result[0].startswith("ERROR"):
                errorcode = 1
                raise Exception(result[0])

            connection.commit()

        except Exception as e:
            errormsg = jsonify(f"[ERROR]: {str(e)}")
            logging.error(f"[ERROR]: Algo ha salido mal: {str(e)}")
        finally:
            if connection:
                cursor.close()
                connection.close()

    if errorcode != 0:
        return errormsg
    else: 
        return jsonify(result[0])  # Devolver el mensaje que retorne la función de PostgreSQL



